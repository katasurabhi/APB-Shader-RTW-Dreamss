/***************************************************************************************/
/*! \file AverageLuminanceShaders.usf
*
* \brief Various pixel shaders for calculating the average luminance of the scene.
*
* \b NOW_OWNER: SJT    7/9/2008 <BR>
*
* (c) 2008 Realtime Worlds Ltd.
****************************************************************************************/

#include "Common.usf"

// Shaders that don't care about NUM_SAMPLES still need it defined to something.
#ifndef NUM_SAMPLES
#define NUM_SAMPLES 1
#endif

sampler2D SourceTexture;

// The per-color weighting to be used for luminance calculations in RGB order.
static const half3 LuminanceVector = float3(0.3, 0.59, 0.11);

//---------------------------------------------------------------------------------------
//! Helper function for the inital pass.
//---------------------------------------------------------------------------------------
half CalcLogLum(float2 UV)
{
	half4 Sample = tex2D(SourceTexture, UV) * MAX_SCENE_COLOR;
	return log(dot(Sample, LuminanceVector) + 0.0001f);
}

//---------------------------------------------------------------------------------------
//! Pixel shader for the initial pass which samples the downsampled-scene, calculates
//! its log-luminance and averages of a 3x3 kernel.
//---------------------------------------------------------------------------------------
void InitialPass(float4 InOffsetUVs[(NUM_SAMPLES + 1) / 2] : TEXCOORD0,
				 out float4 OutColor : COLOR0)
{
	int SampleIndex;
	half LogLumSum = 0.0f;

	UNROLL
	for(SampleIndex = 0;SampleIndex < NUM_SAMPLES - 1;SampleIndex += 2)
	{
		LogLumSum += CalcLogLum(InOffsetUVs[SampleIndex / 2].xy);
		LogLumSum += CalcLogLum(InOffsetUVs[SampleIndex / 2].wz);
	}
	if(SampleIndex < NUM_SAMPLES)
	{
		LogLumSum += CalcLogLum(InOffsetUVs[SampleIndex / 2].xy);
	}
	
	OutColor = LogLumSum / NUM_SAMPLES;
}

//---------------------------------------------------------------------------------------
//! Pixel shader for the iterative and final passes. Just averages 16 samples. Final
//! pass additionally exp()s the result.
//---------------------------------------------------------------------------------------
void IterativeAndFinalPass(float4 InOffsetUVs[(NUM_SAMPLES + 1) / 2] : TEXCOORD0,
						   out float4 OutColor : COLOR0)
{
	int SampleIndex;
	half Sum = 0.0f;

	UNROLL
	for(SampleIndex = 0;SampleIndex < NUM_SAMPLES - 1;SampleIndex += 2)
	{
		Sum += tex2D(SourceTexture, InOffsetUVs[SampleIndex / 2].xy);
		Sum += tex2D(SourceTexture, InOffsetUVs[SampleIndex / 2].wz);
	}
	if(SampleIndex < NUM_SAMPLES)
	{
		Sum += tex2D(SourceTexture, InOffsetUVs[SampleIndex / 2].xy);
	}
	
	float Result = Sum / NUM_SAMPLES;

#if FINAL_PASS
	Result = exp(Result);
#endif

	OutColor = Result;
}

// Adaption calculation parameters.
sampler2D PreviousAdaption;
sampler2D SceneLuminance;

float ConvergenceRate;
float AdaptionCentre;
float AdaptionSlope;

float MinAdaptationIn;
float MinAdaptationOut;
float MaxAdaptationIn;
float MaxAdaptationOut;

//---------------------------------------------------------------------------------------
//!	Pixel shader for the adaption calculation step.
//---------------------------------------------------------------------------------------
void CalculateAdaption(out float4 OutColour : COLOR0)
{
	// Clamp previous adaptation values to valid range to prevent uninitialised data
	// or bogus parameter values from causing the adaptation loop to get "stuck".
	half fPreviousAdaption = clamp(tex2D(PreviousAdaption, float2(0.5f, 0.5f)), 0.0f, MAX_SCENE_COLOR);
	half fSceneLuminance = tex2D(SceneLuminance, float2(0.5f, 0.5f));

	//half TargetLuminance = fSceneLuminance * AdaptionSlope + AdaptionCentre - AdaptionSlope * AdaptionCentre;

	float LogLum = log(fSceneLuminance);
	//half TargetLogLum = smoothstep(MinAdaptationIn, MaxAdaptationIn, LogLum);
	//TargetLogLum = TargetLogLum * (MaxAdaptationOut - MinAdaptationOut) + MinAdaptationOut;
	//half TargetLogLum = clamp(LogLum, MinAdaptationIn, MaxAdaptationIn);
	//half TargetLogLum = smoothstep(MinAdaptationIn, MaxAdaptationIn, LogLum) * (MaxAdaptationIn - MinAdaptationIn) + MinAdaptationIn;

	// Some shortcuts to save typing.
	float b_a = MaxAdaptationIn - MinAdaptationIn;
	float a = MinAdaptationIn;
	float s = AdaptionSlope;

	//float LogLumScaled = saturate((LogLum - a) / b_a);
	//float x = LogLumScaled;
	//float TargetLogLumScaled = -4.0/3.0 * s * x*x*x + 2.0 * s * x*x + 0.5 - 1.0/3.0 * s;
	////float TargetLogLumScaled = (2.0 * x*x) - (4.0/3.0 * x*x*x) + (1.0/6.0);
	////float TargetLogLumScaled = x;
	//float TargetLogLum = b_a * TargetLogLumScaled + a;

	float LogLumScaled = (LogLum - a) / b_a;
	float TargetLogLumScaled = smoothstep(0.0f, 1.0f, 2.0f/3.0f * s * LogLumScaled - s/3.0f + 1.0f/2.0f);
	float TargetLogLum = b_a * TargetLogLumScaled + a;

	half TargetLuminance = exp(TargetLogLum);

	half fNewAdaption = fPreviousAdaption + (TargetLuminance - fPreviousAdaption) * ConvergenceRate;

	OutColour = fNewAdaption;
	//OutColour = TargetLuminance;
}
